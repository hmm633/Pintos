			+--------------------+
			|        CS 439      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+

****EACH student submits a (unique) design document.****

---- Name ----

>> Fill your name, UT EID, CS login, email address, and unique number:

Name: Colt Whaley
EID: cww688	
CS login: cwhaley
Email: coltwhaley@yahoo.com
Unique Number: 53020


Slip days used on this project: 2

---- GROUP ----

>> Fill the names, UT EIDs, CS logins, email addresses, and unique numbers
>> of your group members.  Also fill in each person's ranking on the 
>> partner evaluation scale, as determined by you.

Name1: Heriberto Macias
EID1: hmm633
CS login: hmm633
Email: guardianeddy@yahoo.com
Unique Number: 53025
Ranking (scale below): very good

Name2:
EID2:
CS login:
Email:
Unique Number:
Ranking (scale below):

Name3:
EID2:
CS login:
Email:
Unique Number:
Ranking (scale below):


---- PARTNER EVALUATION SCALE ----

>> Excellent: Consistently went above and beyond - tutored others, carried
>> more than his/her fair share of the load.

>> Very Good: Consistently did what he/she was supposed to do, very well
>> prepared and cooperative.

>> Satisfactory: Usually did what he/she was supposed to do, minimally
>> prepared and cooperative.

>> Marginal: Sometimes failed to show up and/or rarely prepared.

>> Deficient: Often failed to show up and/or rarely prepared.

>> Unsatisfactory: Consistently failed to show up and/or unprepared.

>> Superficial: Practically no participation.

>> No Show: No participation at all.


---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
static struct semaphore sema_sleep;
	Semaphore for sleeping, defined in timer.c. Held and blocked
	threads who called the timer_sleep function

int64_t sleep_ticks;
	variable that held the tick at which a thread would wake, apart of
	the struct thread in thread.h

bool list_compare();
    the wrapper function for the list_less_func typedef. Compares the two values
    based on the aux variable given(sleep duration or priority)

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.
	Timer_sleep is called with a variable for amount of ticks to sleep.
	This is added to the current OS tick and stored in sleep_ticks.
	Then sema_sleep is sema_downed which blocks the thread and adds to
	waiting list. When a timer interrupt occurs, it checks if any of
	the blocked threads in sema_sleep can wake up and signals them up
	if so.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?
    timer_interrupt will only check the list of waiters if it is not empty
    The list is sorted so that only the first elements would be ones to wake
    if any are needed to wake at all.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?
    By initializing the semaphore to 0 by default, the first thread that
    calls it will block until sema_up is called in timer_interrupt after sleep
    completes. The sleep time is initialized before the sema_down so the sleep
    time can be checked at each timer_interrupt

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?
   	Again, the sleep_ticks data is set before the sema_down so even if it is
   	interrupted before it can sema down the sleep is not prolonged longer than it
   	should be
    
---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?
    It is easier to keep track of which thread should wake at what time
    using a single semaphore to keep track of sleeping threads. With a semaphore
    for each thread, you have to parse through the list of all threads and check
    if it is blocked. Then you must see which thread wakes first since they are
    all stored seperately. With one list, you can have it constantly sorted so
    you know the first element will be the first thread to wake.

    The only thing wasteful about our design is that adding each element in at its
    correct location instead of sorting each time timer_interrupt is called would
    be an increasing in time efficiency as list_insert_ordered runs at O(n) where as
    list_sort runs at O(nlogn) every tick. 


			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

		  ADVANCED SCHEDULER (Extra Credit)
		  =================================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future semesters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the semester.

>> In your opinion, was this assignment, or any one of the two problems
>> in it, too easy or too hard?  Did it take too long or too little time?
   I don't know if we just failed miserably or our thought process was
   completely wrong but we didn't even finish the first part and spent
   a considerable amount of time on it. Obviously I can't speak for the 
   second part as we didn't get there.
>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?
   I do feel like I understand semaphores and scheduling better.
>> Is there some particular fact or hint we should give students in
>> future semesters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?
   Being less cryptic about the timer hints on piazza. The most useful
   hint we got was the comment Alison replied to about all of the other
   comments being too cryptic. (Piazza id #243)
>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future semesters or the remaining projects?
   See above
>> Any other comments?
